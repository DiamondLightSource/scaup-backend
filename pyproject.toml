[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scaup"
classifiers = [
    "Development Status :: 3 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]
description = "Scaup's backend"

dependencies = [
    "APScheduler~=3.11.0",
    "SQLAlchemy~=2.0.36",
    "fastapi~=0.116.1",
    "psycopg[binary,pool]~=3.2.9",
    "pydantic~=2.11.7",
    "uvicorn~=0.35.0",
    "types-requests",
    "lims_utils~=0.4.2",
    "requests",
    "fpdf2~=2.8.4",
    "qrcode~=8.2.0",
    "pyjwt[crypto]~=2.10.1",
    "pillow==11.3.0",
    "alembic"
]
dynamic = ["version"]
license.file = "LICENSE"
readme = "README.rst"
requires-python = ">=3.11"    

[project.optional-dependencies]
dev = [
    "black",
    "mypy",
    "pipdeptree",
    "pre-commit",
    "pytest~=8.4.2",
    "pytest-cov",
    "ruff",
    "freezegun~=1.5.5",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "tox-direct",
    "types-mock",
    "pytest-asyncio",
    "responses",
    "httpx~=0.28.1"
]

[project.scripts]
scaup = "scaup.__main__:main"

[project.urls]
GitHub = "https://gitlab.diamond.ac.uk/lims/ebic-scaup/backend"

[[project.authors]] # Further authors may be added by duplicating this section
email = "guilherme.de-freitas@diamond.ac.uk"
name = "Guilherme de Freitas"

[tool.setuptools_scm]
write_to = "src/scaup/_version.py"
fallback_version = "0.15.0"

[tool.mypy]
ignore_missing_imports = true # Ignore missing stubs in imported modules

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst"
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = "error"
markers = [
    "noregister: do not register HTTP mock responses",
    "no_sample_response: do not register sample creation HTTP mock responses"
]

[tool.coverage.run]
data_file = "/tmp/scaup.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

# tox must currently be configured via an embedded ini string
# See: https://github.com/tox-dev/tox/issues/999
[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist=True

[testenv:{pre-commit,mypy,pytest}]
# Don't create a virtualenv for the command, requires tox-direct plugin
direct = True
passenv = *
allowlist_externals =
    pytest
    pre-commit
    mypy
    sphinx-build
    sphinx-autobuild
commands =
    pytest: pytest tests --cov=scaup --cov-report term --cov-report xml:cov.xml -s {posargs}
    mypy: mypy src tests {posargs}
    pre-commit: pre-commit run --all-files {posargs}
setenv =
    CONFIG_PATH=config.json
    MOUNT_POINT=/
    SQL_DATABASE_URL=postgresql+psycopg://sample_handling:sample_root@127.0.0.1:5432/sample_handling
"""


[tool.ruff]
src = ["src", "tests"]
line-length = 120
lint.select = [
    "C4",   # flake8-comprehensions - https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
    "E",    # pycodestyle errors - https://beta.ruff.rs/docs/rules/#error-e
    "F",    # pyflakes rules - https://beta.ruff.rs/docs/rules/#pyflakes-f
    "W",    # pycodestyle warnings - https://beta.ruff.rs/docs/rules/#warning-w
    "I001", # isort
]
